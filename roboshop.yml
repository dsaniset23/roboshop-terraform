# ------------------------------------------------------------------------------
# ðŸ§  Internal Service Communication in Kubernetes.
#
# In Kubernetes, services can talk to each other using *service names* directly.
#
# Example:
#   env:
#     - name: CATALOGUE_HOST
#       value: catalogue
#
# Here "catalogue" is the Kubernetes Service name.
# DNS automatically resolves it to the internal ClusterIP of that service.
#
# No need for Route53 records â€” internal DNS is handled by CoreDNS.
#
# Example internal DNS resolution:
#   <service-name>.<namespace>.svc.cluster.local
# It will throw empty response if labels do not match.
# ------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/frontend
          ports:
            - containerPort: 80
          env:
          - name: CATALOGUE_HOST
            value: catalogue-dev.devops24.shop
          - name: CATALOGUE_PORT
            value: "8080"
          - name: USER_HOST
            value: user-dev.devops24.shop
          - name: USER_PORT
            value: "8080"
          - name: CART_HOST
            value: cart-dev.devops24.shop
          - name: CART_PORT
            value: "8080"
          - name: SHIPPING_HOST
            value: shipping-dev.devops24.shop
          - name: SHIPPING_PORT
            value: "8080"
          - name: PAYMENT_HOST
            value: payment-dev.devops24.shop
          - name: PAYMENT_PORT
            value: "8080"
---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: loadBalancer
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels:
    app: catalogue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalogue
  template:
    metadata:
      labels:
        app: catalogue
    spec:
      containers:
        - name: catalogue
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/catalogue
          ports:
            - containerPort: 8080
          env:
            - name: MONGO
              value: "true"
            - name: MONGO_URL
              value: "mongodb://mongodb-dev.devops24.shop:27017/catalogue"

---

apiVersion: v1
kind: Service
metadata:
  name: catalogue
spec:
  type: clusterIP
  selector:
    app: catalogue
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---

apiVersion: batch/v1
kind: Job
metadata:
  name: catalogue-schema
spec:
  template:
    spec:
      containers:
        - name: catalogue-schema
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/schema-load
          env:
            - name: DB_TYPE
              value: mongo
            - name: APP_GIT_URL
              value: https://github.com/roboshop-devops-project-v3/catalogue
            - name: DB_HOST
              value: mongodb-dev.devops24.shop
            - name: SCHEMA_FILE
              value: db/master-data.js
      restartPolicy: Never

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels:
    app: user
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user
  template:
    metadata:
      labels:
        app: user
    spec:
      containers:
        - name: user
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/user
          ports:
            - containerPort: 8080
          env:
            - name: MONGO
              value: "true"
            - name: MONGO_URL
              value: "mongodb://mongodb-dev.devops24.shop:27017/users"
            - name: REDIS_URL
              value: "redis://redis-dev.devops24.shop:6379"

---

apiVersion: v1
kind: Service
metadata:
  name: user
spec:
  type: clusterIP
  selector:
    app: user
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart
  labels:
    app: cart
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cart
  template:
    metadata:
      labels:
        app: cart
    spec:
      containers:
        - name: cart
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/cart
          ports:
            - containerPort: 8080
          env:
            - name: CATALOGUE_HOST
              value: catalogue-dev.devops24.shop
            - name: CATALOGUE_PORT
              value: "8080"
            - name: REDIS_HOST
              value: redis-dev.devops24.shop

---

apiVersion: v1
kind: Service
metadata:
  name: cart
spec:
  type: clusterIP
  selector:
    app: cart
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels:
    app: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shipping
  template:
    metadata:
      labels:
        app: shipping
    spec:
      containers:
        - name: shipping
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/shipping
          ports:
            - containerPort: 8080
          env:
            - name: CART_ENDPOINT
              value: "cart:8080"
            - name: DB_HOST
              value: mysql-dev.devops24.shop
---

apiVersion: v1
kind: Service
metadata:
  name: shipping
spec:
  type: clusterIP
  selector:
    app: shipping
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---

apiVersion: batch/v1
kind: Job
metadata:
  name: shipping-load-user-data
spec:
  template:
    spec:
      containers:
        - name: catalogue-schema
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/schema-load
          env:
            - name: DB_TYPE
              value: mysql
            - name: APP_GIT_URL
              value: https://github.com/roboshop-devops-project-v3/shipping
            - name: DB_HOST
              value: mysql-dev.devops24.shop
            - name: DB_USER
              value: root
            - name: DB_PASS
              value: RoboShop@1
            - name: SCHEMA_FILE
              value: db/app-user.sql
      restartPolicy: Never

---

apiVersion: batch/v1
kind: Job
metadata:
  name: shipping-create-schema
spec:
  template:
    spec:
      containers:
        - name: catalogue-schema
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/schema-load
          env:
            - name: DB_TYPE
              value: mysql
            - name: APP_GIT_URL
              value: https://github.com/roboshop-devops-project-v3/shipping
            - name: DB_HOST
              value: mysql-dev.devops24.shop
            - name: DB_USER
              value: root
            - name: DB_PASS
              value: RoboShop@1
            - name: SCHEMA_FILE
              value: db/schema.sql
      restartPolicy: Never

---

apiVersion: batch/v1
kind: Job
metadata:
  name: shipping-master-data
spec:
  template:
    spec:
      containers:
        - name: catalogue-schema
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/schema-load
          env:
            - name: DB_TYPE
              value: mysql
            - name: APP_GIT_URL
              value: https://github.com/roboshop-devops-project-v3/shipping
            - name: DB_HOST
              value: mysql-dev.devops24.shop
            - name: DB_USER
              value: root
            - name: DB_PASS
              value: RoboShop@1
            - name: SCHEMA_FILE
              value: db/master-data.sql
      restartPolicy: Never

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    app: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment
  template:
    metadata:
      labels:
        app: payment
    spec:
      containers:
        - name: payment
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/payment
          ports:
            - containerPort: 8080
          env:
            - name: CART_HOST
              value: cart-dev.devops24.shop
            - name: CART_PORT
              value: "8080"
            - name: USER_HOST
              value: user-dev.devops24.shop
            - name: USER_PORT
              value: "8080"
            - name: AMQP_HOST
              value: rabbitmq-dev.devops24.shop
            - name: AMQP_USER
              value: roboshop
            - name: AMQP_PASS
              value: roboshop123
---

apiVersion: v1
kind: Service
metadata:
  name: payment
spec:
  type: clusterIP
  selector:
    app: payment
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---